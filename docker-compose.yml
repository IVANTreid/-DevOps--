version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: exampleuser
      POSTGRES_PASSWORD: examplepass
      POSTGRES_DB: exampledb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U exampleuser" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  django:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: django-app
    command: python3 myproject/manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_USER: exampleuser
      POSTGRES_PASSWORD: examplepass
      POSTGRES_DB: exampledb
      POSTGRES_HOST: postgres
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8000/health/ || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - app_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    command: run 0.0.0.0
    ports:
      - "3000:3000"
    depends_on:
      django:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:3000 || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - app_network

volumes:
  postgres_data:


networks:
  app_network:
